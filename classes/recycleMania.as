package  {		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.display.Stage;	import flash.events.Event;	import flash.system.fscommand;	import flash.utils.Timer;    import flash.events.TimerEvent;		public class recycleMania extends MovieClip {				const DUMP_X:int=-450;		const DUMP_Y:int=200;		const TRASH_FLYING_INTERVAL:Number=1000;		public static const BALLISTIC_COLOR:int=0xFF3300;				var timer:Timer=new Timer(TRASH_FLYING_INTERVAL);		public static var highScore:int=0;		public static var td:trashDump=null;		public static var _stage:Stage=null;		public static var ballistic:Sprite=new Sprite();		public static var ballisticDestinationLocked:Boolean;		public static var ballisticX0, ballisticY0, ballisticX1, ballisticY1:int;		public static var chosenTrash:trash=null;		public static var score:counter;		public static var recycleBins:Array=[];		 				public function recycleMania():void {			// constructor code			recycleBins=[bins.bin1,bins.bin2,bins.bin3];			score=hud.score;						td=new trashDump();			td.x=DUMP_X;			td.y=DUMP_Y;			ballistic.mouseEnabled=ballistic.mouseChildren=false;			ballistic.visible=false;			fg.addChild(td);			addChild(ballistic);			td.initTrash();						addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			timer.addEventListener(TimerEvent.TIMER,onTrashFlying);			fscommand('fullscreen','true');			fscommand('showmenu','false');		}				function onAddedToStage(e:Event):void {			_stage=stage;			removeEventListener(Event.ADDED_TO_STAGE,onAddedToStage);		}				public static function showBallistic():void {			if(!ballistic.visible) {				ballistic.graphics.clear();				ballistic.visible=true;				_stage.addEventListener(MouseEvent.MOUSE_MOVE,onMouseEvent);			}		}				public static function hideBallistic():void {			if(ballistic.visible) {				ballistic.visible=false;				_stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMouseEvent);			}		}				public static function setBallisticOrigin(a:int, b:int):void {			ballisticX0=a;			ballisticY0=b;		}				public static function setBallisticDestination(a:int, b:int):void {			ballisticDestinationLocked=true;			ballisticX1=a;			ballisticY1=b;		}				public static function unlockBallisticDestination():void {			ballisticDestinationLocked=false;		}				public static function drawBallistic(x0:int, y0:int, x1:int, y1:int):void {			var r:int=Math.sqrt(Math.pow(x1-x0,2)+Math.pow(y1-y0,2));			var xAnchor:int=(x0+x1)*.5;			var yAnchor:int=(y0+y1)*.5-r;						ballistic.graphics.clear();			ballistic.graphics.lineStyle(5,BALLISTIC_COLOR);			ballistic.graphics.moveTo(x0,y0);			ballistic.graphics.curveTo(xAnchor,yAnchor,x1,y1);		}				public static function throwAway(bin:recycleBin, x1:int, y1:int):void {			if(chosenTrash!=null) {				chosenTrash.throwAway(bin,x1,y1);			}		}				function trashStartFlying():void {			timer.start();		}				function trashStopFlying():void {			timer.stop();		}				function onTrashFlying(e:TimerEvent):void {			var t:trash=new trash();			t.x=Math.random()*700-350;			fg.addChild(t);			t.throwAway();		}				public static function onMouseEvent(e:MouseEvent):void {			switch (e.type) {								case MouseEvent.MOUSE_MOVE:					var p:Point;					if(ballisticDestinationLocked) {						p=new Point(ballisticX1,ballisticY1);					} else {						p=new Point(e.stageX,e.stageY);					}					drawBallistic(ballisticX0,ballisticY0,p.x,p.y);					break;								}		}			}	}