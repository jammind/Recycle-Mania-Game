// Recycle It Game// trash.as// (C)2011 Jam Zhangpackage {		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Point;	import com.greensock.*;	import com.greensock.easing.*;		public class trash extends Sprite {				public static const UNIT_SIZE:int=65;		const THROW_DURATION:Number=.75;		const THROW_SCALE:Number=.35;		const THROW_ROTATION:int=2;		const HIGHLIGHT_MARGIN:int=40;		const CATEGORY2:int=8;		const CATEGORY3:int=12;				var dump:trashDump;		public var dumpId:int;		public var id, category, unitWidth, unitHeight:int;		var throwRadius, throwX0, throwY0, throwX1, throwY1:int;		public var throwPhase:Number;		public var chosenBin:recycleBin=null;		var score:Boolean;				function trash(_dump:trashDump=null, _dumpid:int=-1):void {			dump=_dump;			dumpId=_dumpid;			highlight.visible=false;			buttonMode=true;			addEventListener(MouseEvent.CLICK,onMouseEvent);						id=int(Math.random()*inner.totalFrames);			if(id<CATEGORY2) {				category=1;			} else if (id<CATEGORY3) {				category=2;			} else {				category=3;			}			inner.stop();			inner.gotoAndStop(id+1);						unitWidth=Math.ceil(inner.width/UNIT_SIZE);			unitHeight=Math.ceil(inner.height/UNIT_SIZE);			highlight.width=inner.width+HIGHLIGHT_MARGIN;			highlight.height=inner.height+HIGHLIGHT_MARGIN;						hotspot.width=unitWidth*UNIT_SIZE;			hotspot.height=unitHeight*UNIT_SIZE;		}				function onMouseEvent(e:MouseEvent):void {			switch (e.type) {								case MouseEvent.CLICK:					recycleMania.chosenTrash=this;					highlight.visible=true;					stage.addEventListener(MouseEvent.MOUSE_DOWN,onMouseEvent);					var p0:Point=new Point(0,0);					p0=localToGlobal(p0);					recycleMania.setBallisticOrigin(p0.x,p0.y);					recycleMania.showBallistic();					break;									case MouseEvent.MOUSE_DOWN:					recycleMania.chosenTrash=null;					recycleMania.hideBallistic();					//throwAway(e.stageX,e.stageY);					highlight.visible=false;					stage.removeEventListener(MouseEvent.MOUSE_DOWN,onMouseEvent);					break;								}		}				public function get matrixWidth():int {			return highlight.width/UNIT_SIZE;		}				public function get matrixHeight():int {			return highlight.height/UNIT_SIZE;		}				public function throwAway(bin:recycleBin=null,x1:int=0,y1:int=0):void {			var p:Point;						if(bin==null) {				score=false;				chosenBin=recycleMania.recycleBins[category-1];				p=chosenBin.getTargetPoint();			} else {				score=true;				chosenBin=bin;				p=new Point(x1,y1);			}			throwX0=x;			throwY0=y;			p=parent.globalToLocal(p);			throwX1=p.x;			throwY1=p.y;			throwRadius=Math.sqrt(Math.pow(throwX1-x,2)+Math.pow(throwY1-y,2))*.5;			throwPhase=0;						if(chosenBin.id==category) {				// Right Choice				TweenLite.to(this, THROW_DURATION, {throwPhase:1.025, onUpdate:onThrowUpdate, onComplete:onThrowComplete, ease:Sine.easeOut});				} else {				// Wrong Choice				TweenLite.to(this, THROW_DURATION*.75, {throwPhase:1, onUpdate:onThrowUpdate, onComplete:onThrow2Complete, ease:Sine.easeOut});				}						sfxPlayer.playSound('swish');		}				public function clear():void {			stage.removeEventListener(MouseEvent.CLICK,onMouseEvent);			stage.removeEventListener(MouseEvent.MOUSE_DOWN,onMouseEvent);			TweenLite.killTweensOf(this);			parent.removeChild(this);			//TweenLite.to(this, THROW_DURATION, {x:-800, onComplete:onClearComplete, ease:Sine.easeOut});			}				function onThrowUpdate():void {			x=throwX0+(throwX1-throwX0)*throwPhase;			y=throwY0+(throwY1-throwY0)*throwPhase-throwRadius*Math.sin(throwPhase*Math.PI);			rotation=throwPhase*360*THROW_ROTATION;			scaleX=scaleY=1-(1-THROW_SCALE)*throwPhase;		}				function onThrowComplete():void {			sfxPlayer.playSound('right');			if(dump!=null) {				dump.removeTrash(this);			}			chosenBin.shake();			chosenBin.showSign(true);			if(score) {				recycleMania.score.add();			}			parent.removeChild(this);		}				function onThrow2Complete():void {			sfxPlayer.playSound('wrong');			if(score) {				recycleMania.score.add(-1);			}			chosenBin.shake();			chosenBin.showSign(false);			TweenLite.to(this, THROW_DURATION*.75, {throwPhase:0, onUpdate:onThrowUpdate, onComplete:onBounceComplete, ease:Sine.easeOut});			}				function onBounceComplete():void {		}			}}